import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
import pickle
import plotly.express as px

st.set_page_config(
    page_title="Churn Prediction App",
    page_icon="üîÄ",
    layout="wide",
    initial_sidebar_state="expanded",)

summ =0

# global variables
uploaded_file = None



# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if 'df_input' not in st.session_state:
    st.session_state['df_input'] = pd.DataFrame()

if 'df_predicted' not in st.session_state:
    st.session_state['df_predicted'] = pd.DataFrame()

if 'tab_selected' not in st.session_state:
    st.session_state['tab_selected'] = None

def reset_session_state():
    st.session_state['df_input'] = pd.DataFrame()
    st.session_state['df_predicted'] = pd.DataFrame()


# Prepare data section

# ML section start
numerical = ['tenure','warehouse_to_home','hour_spend_on_app','number_of_device_registered','number_of_address','order_amount_hike_fromlast_year',
             'coupon_used','order_count','day_since_last_order','cashback_amount']
categorical = ['preferred_payment_mode','preferred_login_device', 'gender','city_tier','prefered_order_cat','marital_status','complain','satisfaction_score'] 

le_enc_cols = ['preferred_login_device','gender']
gender_map = {'male': 0, 'female': 1}
device_map = {'phone': 1, 'computer': 0}

# logistic regression model
model_file_path = 'models/churn_prediction_model.sav'
model = pickle.load(open(model_file_path, 'rb'))   

# encoding model DictVectorizer
encoding_model_file_path = 'models/churn_prediction_model_2.sav'
encoding_model = pickle.load(open(encoding_model_file_path, 'rb'))

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
@st.cache_data
def predict_churn(df_input, treshold):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
    scaler = MinMaxScaler()

    df_original = df_input.copy()
    df_input[numerical] = scaler.fit_transform(df_input[numerical])

    for col in le_enc_cols:
        if col == 'gender':
            df_input[col] = df_input[col].map(gender_map)
        else:
            df_input[col] = df_input[col].map(device_map)

    dicts_df = df_input[categorical + numerical].to_dict(orient='records')
    X = encoding_model.transform(dicts_df)
    # X[np.isnan(X)] = 0
    y_pred = model.predict_proba(X)[:, 1]
    churn_descision = (y_pred >= treshold).astype(int)
    df_original['churn_predicted'] = churn_descision
    df_original['churn_predicted_probability'] = y_pred

    return df_original

@st.cache_data
def convert_df(df):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ csv
    return df.to_csv(index=False).encode('utf-8')

with st.sidebar:
    st.title('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
    tab1, tab2 = st.tabs(["_–ò–∑ —Ñ–∞–π–ª–∞_", "_–í—Ä—É—á–Ω—É—é_"])

    with tab1:
        st.header("–ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìë  .xlsx")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:",on_change=reset_session_state)
        if uploaded_file is not None:
            treshold = st.slider('–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞', 0.0, 1.0, 0.5, 0.1, key='slider1')
            prediction_button = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button1')
            global df_input
            st.session_state['df_input'] = pd.read_excel(uploaded_file, sheet_name='E Comm', index_col= 0)
            if prediction_button:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_churn(st.session_state['df_input'], treshold)
                st.session_state['tab_selected'] = 'tab1'


    with tab2:
        st.header("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚úåüèª")
        st.write('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.')
         # –í–∫–ª–∞–¥–∫–∞ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 2)
        customer_id = st.text_input('Customer ID', placeholder='00000', help='–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞')
        tenure = st.number_input('–°—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º —Å–µ—Ä–≤–∏—Å–∞, (–º–µ—Å)', min_value=0, max_value=100, value=0)  
        warehouse_to_home = st.number_input ('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–æ–º–∞ –¥–æ —Å–∫–ª–∞–¥–∞, (–∫–º)',  min_value=2, max_value=150, value=2)
        hour_spend_on_app = st.number_input ('–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, (—á–∞—Å)', min_value=0, max_value= 6, value=0)
        number_of_device_registered = st.number_input ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', min_value=1, max_value= 10, value=1)
        satisfaction_score = st.number_input ('–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞', min_value=1, max_value= 5, value=1)
        number_of_address = st.number_input ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞', min_value=1, max_value= 25, value=1)
        order_amount_hike_fromlast_year = st.number_input('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º, (%)',min_value=10, max_value= 30, value=10)
        coupon_used = st.number_input ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤', min_value=0, max_value= 15, value=0)
        order_count = st.number_input ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü', min_value=0, max_value= 20, value=0)
        day_since_last_order = st.number_input ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞', min_value=0, max_value= 60, value=0)
        cashback_amount = st.number_input ('–°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–±—ç–∫–∞', min_value=0, max_value= 350, value=0)
        complain = st.selectbox ('–ù–∞–ª–∏—á–∏–µ –∂–∞–ª–æ–±—ã', (' yes','no'))   # –í —Å–ª–æ–≤–∞—Ä–∏–∫–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å 'seniorcitizen': 1 if senior_citizen == '–î–∞' else 0,
        city_tier = st.selectbox ('–ó–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞',(1,2,3))
        preferred_login_device = st.selectbox ('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞',('computer','phone')) 
        preferred_payment_mode = st.selectbox ('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã',('debit_card','credit_card','upi','cc','cod','e_wallet','cash_on_delivery'))
        gender = st.selectbox( '–ü–æ–ª', ('female', 'male'))
        marital_status = st.selectbox( '–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', ('single', 'married','divorced'))
        prefered_order_cat = st.selectbox('–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞', ('laptop__accessory', 'mobile', 'mobile_phone', 'fashion', 'grocery', 'phone'))    
        
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –ø–æ—Ä–æ–≥–æ–º –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if customer_id != '':
            treshold = st.slider('–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞', 0.0, 0.497, 0.5, 0.01, key='slider2')
            prediction_button_tab2 = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button2')
            
            if prediction_button_tab2:
                st.session_state['tab_selected'] = 'tab2'
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session state –≤ –≤–∏–¥–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
                st.session_state['df_input'] = pd.DataFrame({
                    'customer_id': customer_id,
                    'tenure': tenure,
                    'warehouse_to_home': warehouse_to_home,
                    'hour_spend_on_app': hour_spend_on_app,
                    'number_of_device_registered': number_of_device_registered,
                    'satisfaction_score': satisfaction_score,
                    'number_of_address': number_of_address,
                    'order_amount_hike_fromlast_year': order_amount_hike_fromlast_year,
                    'coupon_used': coupon_used,
                    'order_count': order_count,
                    'day_since_last_order': day_since_last_order,
                    'cashback_amount': cashback_amount,
                    'complain': 1 if complain == 'yes' else 0,
                    'city_tier': city_tier,
                    'preferred_login_device' : preferred_login_device,
                    'preferred_payment_mode': preferred_payment_mode,
                    'gender' : gender,
                    'marital_status': marital_status,
                    'prefered_order_cat': prefered_order_cat}, index=[0])

                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_churn(st.session_state['df_input'], treshold)
           
# Sidebar section end

# Main section start
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
st.title('–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ üîÄ')
st.write('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏')    


tab3, tab4, tab5, tab6  = st.tabs(["–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ","–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã","–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥—ã"])
with tab3:
    if uploaded_file == None:
        st.write('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    else: # –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–æ—Ä–µ–∫—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤:
        if uploaded_file == None:
            pass
        else:
            indx = []
            listing = []
            list_result = []
            index_value = ''
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞
            for j in range (0, len(st.session_state['df_input'].columns)):
                if j == 0:
                    for n in range (len(st.session_state['df_input'].columns[j])): # –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                        listing.insert (n,((st.session_state['df_input'].columns[j])[n])) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –∏–∑ –±—É–∫–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π. list - –ø–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    for i in range (len(listing)):
                        if listing[i].isupper(): # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–π–¥–µ–Ω–∞ –±–æ–ª—å—à–∞—è –±—É–∫–≤–∞, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ '_'+ '–∏—Å—Ö–æ–¥–Ω–∞—è –º–∞–ª–∞—è –±—É–∫–≤–∞'
                            list_result.extend('_') # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ list_result
                            k = listing[i].lower()
                            list_result.extend(k)
                        else:
                            list_result.extend(listing[i]) # –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã –ø–∏—à–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    del list_result[0]
                    del list_result[10] # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∏ –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—ã–π –∑–Ω–∞–∫ '_'
                    index_value =''.join(map(str, list_result))
                    del listing[:]
                    del list_result[:]
                    indx.append(index_value)
                    index_value =''

                else:
                    for n in range (len(st.session_state['df_input'].columns[j])): # –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        listing.insert (n,((st.session_state['df_input'].columns[j])[n])) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –∏–∑ –±—É–∫–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π. list - –ø–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    for i in range (len(listing)):
                        if listing[i].isupper(): # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–π–¥–µ–Ω–∞ –±–æ–ª—å—à–∞—è –±—É–∫–≤–∞, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ '_'+ '–∏—Å—Ö–æ–¥–Ω–∞—è –º–∞–ª–∞—è –±—É–∫–≤–∞'
                            list_result.extend('_') # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ list_result
                            k = listing[i].lower()
                            list_result.extend(k)
                        else:
                            list_result.extend(listing[i]) # –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã –ø–∏—à–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    del list_result[0] # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ '_'
                    index_value =''.join(map(str, list_result)) # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                    del listing[:]
                    del list_result[:]
                    indx.append(index_value)
        st.session_state['df_input'].columns = indx
        st.session_state['df_input'] = st.session_state['df_input'].reset_index()
        st.session_state['df_input'] = st.session_state['df_input'].drop('index', axis = 1)
        st.session_state['df_input'] 
    
     
with tab4:
    if uploaded_file == None:
        st.write('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    else:
        st.write( 1) 
with tab5:
    
     # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–µ–º –≤–∏–¥–µ
    if len(st.session_state['df_predicted']) == 0:
        st.write('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ expander
        with st.expander("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.write(st.session_state['df_input'])
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    # st.line_chart(st.session_state['df_input'][['tenure', 'cashback_amount']])
    # st.bar_chart(st.session_state['df_input'][['contract']])
            
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ 2)
    if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab2':
        if st.session_state['df_predicted']['churn_predicted'][0] == 0:
            st.image('https://gifdb.com/images/high/happy-face-steve-carell-the-office-057k667rwmncrjwh.gif', width=200)
            st.subheader(f'–ö–ª–∏–µ–Ω—Ç :green[–æ—Å—Ç–∞–µ—Ç—Å—è] c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(1 - st.session_state["df_predicted"]["churn_predicted_probability"][0]) * 100:.2f}%')
        else:
            st.image('https://media.tenor.com/QFnU4bhN8gMAAAAd/michael-scott-crying.gif', width=200)
            st.subheader(f'–ö–ª–∏–µ–Ω—Ç :red[—É—Ö–æ–¥–∏—Ç] c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(st.session_state["df_predicted"]["churn_predicted_probability"][0]) * 100:.2f}%')

with tab6:
    st.write('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª–∞–¥–∫–∞ 1)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab1':
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.write(st.session_state['df_predicted'])
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    res_all_csv = convert_df(st.session_state['df_predicted'])
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
        data=res_all_csv,
        file_name='df-churn-predicted-all.csv',
        mime='text/csv',
    )

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Ç–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    fig = px.histogram(st.session_state['df_predicted'], x='churn_predicted', color='churn_predicted')
    st.plotly_chart(fig, use_container_width=True)

    # –ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
    risk_clients = st.session_state['df_predicted'][st.session_state['df_predicted']['churn_predicted'] == 1]
    # –í—ã–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
    if len(risk_clients) > 0:
        st.subheader('–ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞')
        st.write(risk_clients)
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
        res_risky_csv = convert_df(risk_clients)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞",
            data=res_risky_csv,
            file_name='df-churn-predicted-risk-clients.csv',
            mime='text/csv',
        )